@model AddNewsMsgInfo

@{
    ViewBag.Title = "编辑单图文回复";
    Layout = "~/Views/Shared/_Layout_Content.cshtml";
}

@section styles{
    @Styles.Render("~/content/css/editor", "~/content/css/upload")

    <style>
        #smallpic img {
            height: 120px;
        }
    </style>
}


<div class="wrapper wrapper-content">
    <div class="ibox float-e-margins">
        <div class="ibox-title">
            <h5>@ViewBag.Title</h5>
            <div class="ibox-tools">
                <a class="collapse-link">
                    <i class="fa fa-chevron-up"></i>
                </a>
            </div>
        </div>
        <div class="ibox-content">
            @using (Html.BeginForm("EditSingleTextImageReply", "Reply", FormMethod.Post, new { @class = "form-horizontal" }))
            {
                @Html.HiddenFor(x=>x.Id)
                <div class="form-group">
                    <label class="col-sm-3 control-label"><span class="required">*</span>@Html.LabelFor(m => m.Title)：</label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.Title, new { @class = "form-control required", placeholder = "标题", })
                        @Html.ValidationMessageFor(m => m.Title)
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label"><span class="required">*</span>@Html.LabelFor(m => m.Description)：</label>
                    <div class="col-sm-8">
                        @Html.TextAreaFor(m => m.Description, new { @class = "form-control required" })
                        @Html.ValidationMessageFor(m => m.Description)
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label"><span class="required">*</span>@Html.LabelFor(m => m.PicUrl)：</label>
                    <div class="col-sm-8">
                        <div class="fgroup">
                            <div style="width: 100%; ">
                                <span id="swfu_container">
                                    <span>
                                        <span id="spanButtonPlaceholder"></span>
                                    </span>
                                    <span id="divFileProgressContainer"></span>
                                </span>
                                <div class="help-block">建议尺寸：360*200</div>
                            </div>
                            <div id="smallpic">
                                <img src="@(Model.PicUrl)">
                                <a id="delpic" href="javascript:void(0)" onclick="RemovePic()">删除</a>
                            </div>
                            @Html.HiddenFor(p => p.PicUrl)
                        </div>
                        @Html.ValidationMessageFor(m => m.PicUrl)
                    </div>
                </div>
                <div class="form-group">
                    <label class="col-sm-3 control-label">@Html.LabelFor(m => m.Reply.ReplyType)：</label>
                    <div class="col-sm-8">
                        <div class="controls">
                            <label class="inline">
                                <input type="checkbox" name="SubscribeReply" id="SubscribeReply" data-bind="value: SubscribeReply, attr:{ disabled: AllowSubscribeReply() == false }" value="true">
                                关注时回复
                            </label>
                            <label class="inline">
                                <input type="checkbox" name="NoMatchReply" data-bind="checked: NoMatchReply, attr:{ disabled: AllowNoMatchReply() == false }" id="NoMatchReply" value="true">
                                无匹配回复
                            </label>
                            <label class="inline">
                                <input type="checkbox" name="KeyReply" data-bind="checked: KeyReply" id="KeyReply" value="true">
                                关键字回复
                            </label>
                            @Html.ValidationMessageFor(m => m.Reply.ReplyType)
                        </div>
                    </div>
                </div>
                <div class="form-group" data-bind="visible: KeyReply() == true " style="display:none;">
                    <label class="col-sm-3 control-label">@Html.LabelFor(m => m.Reply.Keys)：</label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.Reply.Keys, new { @class = "form-control required", placeholder = "关键字" })
                        @Html.ValidationMessageFor(m => m.Reply.Keys)
                    </div>
                </div>
                <div class="form-group" data-bind="visible: KeyReply() == true " style="display:none;">
                    <label class="col-sm-3 control-label">@Html.LabelFor(m => m.Reply.MatchType)：</label>
                    <div class="col-sm-8">
                        <div class="controls">
                            <label class="inline">
                                <input type="radio" name="Reply.MatchType" id="optionsRadios1" value="0" checked>
                                模糊匹配
                            </label>
                            <label class="inline">
                                <input type="radio" name="Reply.MatchType" id="optionsRadios2" value="1">
                                精确匹配
                            </label>
                            @Html.ValidationMessageFor(m => m.Reply.MatchType)
                        </div>
                    </div>
                </div>
                <div class="form-group" data-bind="visible: KeyReply() == true ">
                    <label class="col-sm-3 control-label">@Html.LabelFor(m => m.Url)：</label>
                    <div class="col-sm-8">
                        @Html.TextBoxFor(m => m.Url, new { @class = "form-control", placeholder = "可不填，若填写则优先跳转" })
                        @Html.ValidationMessageFor(m => m.Url)
                        <p class="help-block">可不填，若填写则优先跳转</p>
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-sm-3 control-label">@Html.LabelFor(m => m.Content)：</label>
                    <div class="col-sm-8">
                        @Html.TextAreaFor(m => m.Content, new { @class = "form-control summernote", style = "height:400px", placeholder = "内容" })
                        @Html.ValidationMessageFor(m => m.Content)
                    </div>
                </div>

                <div class="form-group">
                    <label class="col-sm-3 control-label"></label>
                    <div class="col-sm-8">
                        <div class="controls">
                            <label class="inline">
                                @Html.CheckBoxFor(m => m.Reply.IsDisable)
                                @Html.DisplayNameFor(m => m.Reply.IsDisable)
                            </label>
                        </div>
                    </div>
                </div>
                <div class="form-group">
                    <div class="col-sm-offset-3 col-sm-8">
                        <button class="btn btn-info" type="submit">保存</button>
                        <button class="btn btn-white" type="button" id="btnBack">返回</button>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section scripts{
    @Scripts.Render("~/Content/js/jqueryValidate", "~/Content/js/plugins/layer/layermin", "~/Content/js/editor", "~/content/js/swfupload", "~/Content/js/datepicker", "~/Content/js/controls")
    <script>
        $("#btnBack").bind("click", function (e) {
            XPage.GoTo(e.target, "@Url.Action("Index")");
        });
        var auth = "@(Request.Cookies[FormsAuthentication.FormsCookieName]==null ? string.Empty : Request.Cookies[FormsAuthentication.FormsCookieName].Value)";

        function viewModel() {
            var self = this;
            self.Bind = ko.observable();
            self.BindValue = ko.observable();
            self.ReplyType = ko.observable();
            self.Url = ko.observable("http://");
            self.BindTopic = ko.observable();
            self.NoMatchReply = ko.observable(@(Model.NoMatchReply.ToString().ToLower()));
            self.SubscribeReply = ko.observable(@(Model.SubscribeReply.ToString().ToLower()));
            self.KeyReply = ko.observable(@(Model.KeyReply.ToString().ToLower()));

            self.AllowNoMatchReply = ko.observable(@(Model.AllowNoMatchReply.ToString().ToLower()));
            self.AllowSubscribeReply = ko.observable(@(Model.AllowSubscribeReply.ToString().ToLower()));
        }
        var mainVm = new viewModel();
        ko.applyBindings(mainVm);
    </script>
}
